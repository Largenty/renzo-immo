-- ============================================
-- Fix: Remplacer transformation_type_id par transformation_type
-- ============================================

-- 1. Supprimer la contrainte de foreign key si elle existe
DO $$
BEGIN
    -- Trouver et supprimer la contrainte FK
    EXECUTE (
        SELECT 'ALTER TABLE public.images DROP CONSTRAINT ' || constraint_name || ';'
        FROM information_schema.table_constraints
        WHERE table_schema = 'public'
          AND table_name = 'images'
          AND constraint_type = 'FOREIGN KEY'
          AND constraint_name LIKE '%transformation_type%'
        LIMIT 1
    );
    RAISE NOTICE '‚úÖ Contrainte FK transformation_type supprim√©e';
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '‚úì Aucune contrainte FK √† supprimer';
END $$;

-- 2. Supprimer l'ancienne colonne transformation_type_id si elle existe
ALTER TABLE public.images DROP COLUMN IF EXISTS transformation_type_id;

-- 3. Ajouter la nouvelle colonne transformation_type (string)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name = 'images'
          AND column_name = 'transformation_type'
    ) THEN
        ALTER TABLE public.images
        ADD COLUMN transformation_type VARCHAR(100) NOT NULL DEFAULT 'depersonnalisation';

        RAISE NOTICE '‚úÖ Colonne transformation_type ajout√©e';
    ELSE
        RAISE NOTICE '‚úì Colonne transformation_type existe d√©j√†';
    END IF;
END $$;

-- 4. Ajouter room_type si elle n'existe pas
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name = 'images'
          AND column_name = 'room_type'
    ) THEN
        ALTER TABLE public.images
        ADD COLUMN room_type VARCHAR(100);

        RAISE NOTICE '‚úÖ Colonne room_type ajout√©e';
    ELSE
        RAISE NOTICE '‚úì Colonne room_type existe d√©j√†';
    END IF;
END $$;

-- 5. Ajouter user_id si elle n'existe pas
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name = 'images'
          AND column_name = 'user_id'
    ) THEN
        ALTER TABLE public.images
        ADD COLUMN user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;

        CREATE INDEX IF NOT EXISTS idx_images_user ON public.images(user_id);

        RAISE NOTICE '‚úÖ Colonne user_id ajout√©e';
    ELSE
        RAISE NOTICE '‚úì Colonne user_id existe d√©j√†';
    END IF;
END $$;

-- ============================================
-- V√©rifications
-- ============================================

-- Afficher la structure de la table images
SELECT
    'üìã Structure table images' as info,
    column_name,
    data_type,
    is_nullable,
    CASE
        WHEN column_default IS NOT NULL THEN column_default::text
        ELSE 'NULL'
    END as default_value
FROM information_schema.columns
WHERE table_schema = 'public'
  AND table_name = 'images'
ORDER BY ordinal_position;

-- V√©rifier les colonnes requises
SELECT
    '‚úÖ Colonnes requises' as check_type,
    CASE
        WHEN transformation_type AND room_type AND user_id
        THEN '‚úÖ TOUTES les colonnes requises sont pr√©sentes'
        ELSE '‚ùå Il manque des colonnes'
    END as result
FROM (
    SELECT
        EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'images' AND column_name = 'transformation_type') as transformation_type,
        EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'images' AND column_name = 'room_type') as room_type,
        EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'images' AND column_name = 'user_id') as user_id
) checks;

-- V√©rifier qu'il n'y a plus de transformation_type_id
SELECT
    '‚ö†Ô∏è Anciennes colonnes' as warning,
    CASE
        WHEN EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'images' AND column_name = 'transformation_type_id')
        THEN '‚ö†Ô∏è transformation_type_id existe encore (relancez le script)'
        ELSE '‚úÖ transformation_type_id a √©t√© supprim√©e'
    END as result;

-- ============================================
-- R√âSULTAT FINAL
-- ============================================

SELECT
    'üéØ R√âSULTAT FINAL' as summary,
    CASE
        WHEN has_transformation_type AND has_room_type AND has_user_id AND NOT has_old_column
        THEN '‚úÖ TOUT EST PR√äT ! Vous pouvez uploader des images maintenant.'
        WHEN has_old_column
        THEN '‚ùå L''ancienne colonne transformation_type_id existe encore - Relancez ce script'
        WHEN NOT has_transformation_type
        THEN '‚ùå Colonne transformation_type manquante - Relancez ce script'
        WHEN NOT has_room_type
        THEN '‚ùå Colonne room_type manquante - Relancez ce script'
        WHEN NOT has_user_id
        THEN '‚ùå Colonne user_id manquante - Relancez ce script'
        ELSE '‚ö†Ô∏è Probl√®me inconnu'
    END as result
FROM (
    SELECT
        EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'images' AND column_name = 'transformation_type') as has_transformation_type,
        EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'images' AND column_name = 'room_type') as has_room_type,
        EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'images' AND column_name = 'user_id') as has_user_id,
        EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'images' AND column_name = 'transformation_type_id') as has_old_column
) checks;

-- ============================================
-- Instructions
-- ============================================

/*
üöÄ COMMENT UTILISER :

1. Copier TOUT ce fichier
2. Aller sur Supabase SQL Editor
3. Coller et cliquer "RUN"
4. V√©rifier le "R√âSULTAT FINAL"

‚úÖ Si "TOUT EST PR√äT" :
   ‚Üí Recharger l'app (F5)
   ‚Üí Uploader une image
   ‚Üí √áa devrait marcher !

‚ùå Si erreur :
   ‚Üí Partager le message d'erreur complet

Ce script :
- Supprime transformation_type_id (FK vers transformation_types)
- Ajoute transformation_type (VARCHAR simple)
- Ajoute room_type
- Ajoute user_id
*/
